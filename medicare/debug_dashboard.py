#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö –¥–ª—è –ø–∞–Ω–µ–ª—ñ —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞
"""
import os
import sys
import django
from datetime import date, datetime, timedelta

# –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'medicare.settings')
django.setup()

from django.utils import timezone
from staff.models import User, StaffProfile
from patients.models import PatientProfile, MedicalHistory
from consultation.models import Consultation
from programs.models import RehabilitationProgram

def check_database_state():
    """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É –±–∞–∑–∏ –¥–∞–Ω–∏—Ö"""
    print("=" * 60)
    print("üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ë–ê–ó–ò –î–ê–ù–ò–•")
    print("=" * 60)
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
    total_users = User.objects.count()
    doctors = User.objects.filter(user_type='doctor').count()
    patients = User.objects.filter(user_type='patient').count()
    
    print(f"üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ:")
    print(f"   –í—Å—å–æ–≥–æ: {total_users}")
    print(f"   –õ—ñ–∫–∞—Ä—ñ: {doctors}")
    print(f"   –ü–∞—Ü—ñ—î–Ω—Ç–∏: {patients}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—ñ
    staff_profiles = StaffProfile.objects.count()
    patient_profiles = PatientProfile.objects.count()
    
    print(f"\nüìã –ü—Ä–æ—Ñ—ñ–ª—ñ:")
    print(f"   –ü—Ä–æ—Ñ—ñ–ª—ñ –ø–µ—Ä—Å–æ–Ω–∞–ª—É: {staff_profiles}")
    print(f"   –ü—Ä–æ—Ñ—ñ–ª—ñ –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤: {patient_profiles}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó
    consultations = Consultation.objects.count()
    today_consultations = Consultation.objects.filter(
        start_time__date=timezone.now().date()
    ).count()
    
    print(f"\nü©∫ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó:")
    print(f"   –í—Å—å–æ–≥–æ: {consultations}")
    print(f"   –ù–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {today_consultations}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—Ä–æ–≥—Ä–∞–º–∏
    programs = RehabilitationProgram.objects.count()
    active_programs = RehabilitationProgram.objects.filter(status='active').count()
    
    print(f"\nüè• –ü—Ä–æ–≥—Ä–∞–º–∏ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó:")
    print(f"   –í—Å—å–æ–≥–æ: {programs}")
    print(f"   –ê–∫—Ç–∏–≤–Ω–∏—Ö: {active_programs}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–≤'—è–∑–∫–∏
    print(f"\nüîó –ó–≤'—è–∑–∫–∏:")
    for profile in StaffProfile.objects.all()[:3]:
        assigned_patients = profile.patients.count()
        print(f"   –õ—ñ–∫–∞—Ä {profile.user.get_full_name()}: {assigned_patients} –ø–∞—Ü—ñ—î–Ω—Ç—ñ–≤")

def create_test_data():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö"""
    print("\n" + "=" * 60)
    print("üîß –°–¢–í–û–†–ï–ù–ù–Ø –¢–ï–°–¢–û–í–ò–• –î–ê–ù–ò–•")
    print("=" * 60)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ª—ñ–∫–∞—Ä—è, —è–∫—â–æ –Ω–µ–º–∞—î
    doctor_user, created = User.objects.get_or_create(
        username='test_doctor',
        defaults={
            'email': 'doctor@test.com',
            'first_name': '–û–ª–µ–∫—Å–∞–Ω–¥—Ä',
            'last_name': '–ü–µ—Ç—Ä–µ–Ω–∫–æ',
            'user_type': 'doctor',
            'phone_number': '+380501234567'
        }
    )
    if created:
        doctor_user.set_password('doctor123')
        doctor_user.save()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ª—ñ–∫–∞—Ä—è: {doctor_user.username}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –ª—ñ–∫–∞—Ä—è
    doctor_profile, created = StaffProfile.objects.get_or_create(
        user=doctor_user,
        defaults={
            'specialization': '–§—ñ–∑–∏—á–Ω–∞ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—è',
            'bio': '–¢–µ—Å—Ç–æ–≤–∏–π –ª—ñ–∫–∞—Ä –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—ó —Å–∏—Å—Ç–µ–º–∏'
        }
    )
    if created:
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –ª—ñ–∫–∞—Ä—è")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞
    patient_user, created = User.objects.get_or_create(
        username='test_patient',
        defaults={
            'email': 'patient@test.com',
            'first_name': '–ú–∞—Ä—ñ—è',
            'last_name': '–Ü–≤–∞–Ω–µ–Ω–∫–æ',
            'user_type': 'patient',
            'phone_number': '+380501234568'
        }
    )
    if created:
        patient_user.set_password('patient123')
        patient_user.save()
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞: {patient_user.username}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø–∞—Ü—ñ—î–Ω—Ç–∞
    patient_profile, created = PatientProfile.objects.get_or_create(
        user=patient_user,
        defaults={
            'date_of_birth': date(1985, 3, 15),
            'gender': 'F',
            'address': '–º. –ö–∏—ó–≤, –≤—É–ª. –¢–µ—Å—Ç–æ–≤–∞ 1',
            'emergency_contact_name': '–Ü–≤–∞–Ω –Ü–≤–∞–Ω–µ–Ω–∫–æ',
            'emergency_contact_phone': '+380501234569'
        }
    )
    if created:
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ—Ñ—ñ–ª—å –ø–∞—Ü—ñ—î–Ω—Ç–∞")
    
    # –ü—Ä–∏–∑–Ω–∞—á–∞—î–º–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –ª—ñ–∫–∞—Ä—é
    patient_profile.assigned_doctors.add(doctor_profile)
    print(f"‚úÖ –ü–∞—Ü—ñ—î–Ω—Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–æ –ª—ñ–∫–∞—Ä—é")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
    today = timezone.now().date()
    start_time = timezone.make_aware(datetime.combine(today, datetime.now().time().replace(hour=14, minute=0)))
    end_time = start_time + timedelta(hours=1)
    
    consultation, created = Consultation.objects.get_or_create(
        doctor=doctor_profile,
        patient=patient_profile,
        start_time=start_time,
        defaults={
            'end_time': end_time,
            'consultation_type': 'in_person',
            'status': 'scheduled',
            'notes': '–¢–µ—Å—Ç–æ–≤–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—è'
        }
    )
    if created:
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ: {start_time}")
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø—Ä–æ–≥—Ä–∞–º—É —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó
    program, created = RehabilitationProgram.objects.get_or_create(
        patient=patient_profile,
        doctor=doctor_profile,
        title='–¢–µ—Å—Ç–æ–≤–∞ –ø—Ä–æ–≥—Ä–∞–º–∞ —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó',
        defaults={
            'description': '–ü—Ä–æ–≥—Ä–∞–º–∞ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –ª—ñ–∫–∞—Ä—è',
            'start_date': today,
            'end_date': today + timedelta(days=30),
            'status': 'active'
        }
    )
    if created:
        print(f"‚úÖ –°—Ç–≤–æ—Ä–µ–Ω–æ –ø—Ä–æ–≥—Ä–∞–º—É —Ä–µ–∞–±—ñ–ª—ñ—Ç–∞—Ü—ñ—ó: {program.title}")

def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è"""
    print("üöÄ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ê–ù–ï–õ–Ü –¢–ï–†–ê–ü–ï–í–¢–ê")
    
    # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞–Ω
    check_database_state()
    
    # –Ø–∫—â–æ –¥–∞–Ω–∏—Ö –º–∞–ª–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ
    if (User.objects.filter(user_type='doctor').count() == 0 or 
        PatientProfile.objects.count() == 0 or
        Consultation.objects.count() == 0):
        
        print("\n‚ö†Ô∏è  –í–∏—è–≤–ª–µ–Ω–æ –º–∞–ª–æ –¥–∞–Ω–∏—Ö. –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ...")
        create_test_data()
        
        print("\nüîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö:")
        check_database_state()
    
    print("\n" + "=" * 60)
    print("‚úÖ –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print("=" * 60)
    print("\nüí° –¢–µ–ø–µ—Ä —Å–ø—Ä–æ–±—É–π—Ç–µ –æ–Ω–æ–≤–∏—Ç–∏ –ø–∞–Ω–µ–ª—å —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞")
    print("   URL: /therapist-dashboard/")
    print(f"   –õ–æ–≥—ñ–Ω –ª—ñ–∫–∞—Ä—è: test_doctor / doctor123")

if __name__ == '__main__':
    main()